// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class CommunityProposalEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("calldata", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CommunityProposalEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CommunityProposalEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CommunityProposalEntity", id.toString(), this);
    }
  }

  static load(id: string): CommunityProposalEntity | null {
    return changetype<CommunityProposalEntity | null>(
      store.get("CommunityProposalEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get calldata(): Bytes {
    let value = this.get("calldata");
    return value!.toBytes();
  }

  set calldata(value: Bytes) {
    this.set("calldata", Value.fromBytes(value));
  }

  get status(): i32 {
    let value = this.get("status");
    return value!.toI32();
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }

  get endBlock(): i32 {
    let value = this.get("endBlock");
    return value!.toI32();
  }

  set endBlock(value: i32) {
    this.set("endBlock", Value.fromI32(value));
  }
}

export class CommunityEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("previous", Value.fromBytes(Bytes.empty()));
    this.set("claimAmount", Value.fromBigInt(BigInt.zero()));
    this.set("maxClaim", Value.fromBigInt(BigInt.zero()));
    this.set("decreaseStep", Value.fromBigInt(BigInt.zero()));
    this.set("contributed", Value.fromBigInt(BigInt.zero()));
    this.set("claimed", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CommunityEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CommunityEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CommunityEntity", id.toString(), this);
    }
  }

  static load(id: string): CommunityEntity | null {
    return changetype<CommunityEntity | null>(store.get("CommunityEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get startDayId(): i32 {
    let value = this.get("startDayId");
    return value!.toI32();
  }

  set startDayId(value: i32) {
    this.set("startDayId", Value.fromI32(value));
  }

  get state(): i32 {
    let value = this.get("state");
    return value!.toI32();
  }

  set state(value: i32) {
    this.set("state", Value.fromI32(value));
  }

  get previous(): Bytes {
    let value = this.get("previous");
    return value!.toBytes();
  }

  set previous(value: Bytes) {
    this.set("previous", Value.fromBytes(value));
  }

  get claimAmount(): BigInt {
    let value = this.get("claimAmount");
    return value!.toBigInt();
  }

  set claimAmount(value: BigInt) {
    this.set("claimAmount", Value.fromBigInt(value));
  }

  get maxClaim(): BigInt {
    let value = this.get("maxClaim");
    return value!.toBigInt();
  }

  set maxClaim(value: BigInt) {
    this.set("maxClaim", Value.fromBigInt(value));
  }

  get decreaseStep(): BigInt {
    let value = this.get("decreaseStep");
    return value!.toBigInt();
  }

  set decreaseStep(value: BigInt) {
    this.set("decreaseStep", Value.fromBigInt(value));
  }

  get baseInterval(): i32 {
    let value = this.get("baseInterval");
    return value!.toI32();
  }

  set baseInterval(value: i32) {
    this.set("baseInterval", Value.fromI32(value));
  }

  get incrementInterval(): i32 {
    let value = this.get("incrementInterval");
    return value!.toI32();
  }

  set incrementInterval(value: i32) {
    this.set("incrementInterval", Value.fromI32(value));
  }

  get beneficiaries(): i32 {
    let value = this.get("beneficiaries");
    return value!.toI32();
  }

  set beneficiaries(value: i32) {
    this.set("beneficiaries", Value.fromI32(value));
  }

  get removedBeneficiaries(): i32 {
    let value = this.get("removedBeneficiaries");
    return value!.toI32();
  }

  set removedBeneficiaries(value: i32) {
    this.set("removedBeneficiaries", Value.fromI32(value));
  }

  get managers(): i32 {
    let value = this.get("managers");
    return value!.toI32();
  }

  set managers(value: i32) {
    this.set("managers", Value.fromI32(value));
  }

  get removedManagers(): i32 {
    let value = this.get("removedManagers");
    return value!.toI32();
  }

  set removedManagers(value: i32) {
    this.set("removedManagers", Value.fromI32(value));
  }

  get contributed(): BigInt {
    let value = this.get("contributed");
    return value!.toBigInt();
  }

  set contributed(value: BigInt) {
    this.set("contributed", Value.fromBigInt(value));
  }

  get claimed(): BigInt {
    let value = this.get("claimed");
    return value!.toBigInt();
  }

  set claimed(value: BigInt) {
    this.set("claimed", Value.fromBigInt(value));
  }
}

export class CommunityDailyEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("community", Value.fromString(""));
    this.set("contributed", Value.fromBigInt(BigInt.zero()));
    this.set("claimed", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CommunityDailyEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CommunityDailyEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CommunityDailyEntity", id.toString(), this);
    }
  }

  static load(id: string): CommunityDailyEntity | null {
    return changetype<CommunityDailyEntity | null>(
      store.get("CommunityDailyEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get community(): string {
    let value = this.get("community");
    return value!.toString();
  }

  set community(value: string) {
    this.set("community", Value.fromString(value));
  }

  get dayId(): i32 {
    let value = this.get("dayId");
    return value!.toI32();
  }

  set dayId(value: i32) {
    this.set("dayId", Value.fromI32(value));
  }

  get beneficiaries(): i32 {
    let value = this.get("beneficiaries");
    return value!.toI32();
  }

  set beneficiaries(value: i32) {
    this.set("beneficiaries", Value.fromI32(value));
  }

  get managers(): i32 {
    let value = this.get("managers");
    return value!.toI32();
  }

  set managers(value: i32) {
    this.set("managers", Value.fromI32(value));
  }

  get contributed(): BigInt {
    let value = this.get("contributed");
    return value!.toBigInt();
  }

  set contributed(value: BigInt) {
    this.set("contributed", Value.fromBigInt(value));
  }

  get claimed(): BigInt {
    let value = this.get("claimed");
    return value!.toBigInt();
  }

  set claimed(value: BigInt) {
    this.set("claimed", Value.fromBigInt(value));
  }
}

export class UBIEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("contributed", Value.fromBigInt(BigInt.zero()));
    this.set("claimed", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UBIEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UBIEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UBIEntity", id.toString(), this);
    }
  }

  static load(id: string): UBIEntity | null {
    return changetype<UBIEntity | null>(store.get("UBIEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get communities(): i32 {
    let value = this.get("communities");
    return value!.toI32();
  }

  set communities(value: i32) {
    this.set("communities", Value.fromI32(value));
  }

  get beneficiaries(): i32 {
    let value = this.get("beneficiaries");
    return value!.toI32();
  }

  set beneficiaries(value: i32) {
    this.set("beneficiaries", Value.fromI32(value));
  }

  get managers(): i32 {
    let value = this.get("managers");
    return value!.toI32();
  }

  set managers(value: i32) {
    this.set("managers", Value.fromI32(value));
  }

  get contributed(): BigInt {
    let value = this.get("contributed");
    return value!.toBigInt();
  }

  set contributed(value: BigInt) {
    this.set("contributed", Value.fromBigInt(value));
  }

  get claimed(): BigInt {
    let value = this.get("claimed");
    return value!.toBigInt();
  }

  set claimed(value: BigInt) {
    this.set("claimed", Value.fromBigInt(value));
  }
}

export class UBIDailyEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("contributed", Value.fromBigInt(BigInt.zero()));
    this.set("claimed", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UBIDailyEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UBIDailyEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UBIDailyEntity", id.toString(), this);
    }
  }

  static load(id: string): UBIDailyEntity | null {
    return changetype<UBIDailyEntity | null>(store.get("UBIDailyEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get communities(): i32 {
    let value = this.get("communities");
    return value!.toI32();
  }

  set communities(value: i32) {
    this.set("communities", Value.fromI32(value));
  }

  get beneficiaries(): i32 {
    let value = this.get("beneficiaries");
    return value!.toI32();
  }

  set beneficiaries(value: i32) {
    this.set("beneficiaries", Value.fromI32(value));
  }

  get managers(): i32 {
    let value = this.get("managers");
    return value!.toI32();
  }

  set managers(value: i32) {
    this.set("managers", Value.fromI32(value));
  }

  get contributed(): BigInt {
    let value = this.get("contributed");
    return value!.toBigInt();
  }

  set contributed(value: BigInt) {
    this.set("contributed", Value.fromBigInt(value));
  }

  get claimed(): BigInt {
    let value = this.get("claimed");
    return value!.toBigInt();
  }

  set claimed(value: BigInt) {
    this.set("claimed", Value.fromBigInt(value));
  }
}

export class ManagerEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("community", Value.fromString(""));
    this.set("activity", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ManagerEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ManagerEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ManagerEntity", id.toString(), this);
    }
  }

  static load(id: string): ManagerEntity | null {
    return changetype<ManagerEntity | null>(store.get("ManagerEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get community(): string {
    let value = this.get("community");
    return value!.toString();
  }

  set community(value: string) {
    this.set("community", Value.fromString(value));
  }

  get state(): i32 {
    let value = this.get("state");
    return value!.toI32();
  }

  set state(value: i32) {
    this.set("state", Value.fromI32(value));
  }

  get added(): i32 {
    let value = this.get("added");
    return value!.toI32();
  }

  set added(value: i32) {
    this.set("added", Value.fromI32(value));
  }

  get removed(): i32 {
    let value = this.get("removed");
    return value!.toI32();
  }

  set removed(value: i32) {
    this.set("removed", Value.fromI32(value));
  }

  get activity(): Array<string> {
    let value = this.get("activity");
    return value!.toStringArray();
  }

  set activity(value: Array<string>) {
    this.set("activity", Value.fromStringArray(value));
  }
}

export class BeneficiaryEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("community", Value.fromString(""));
    this.set("activity", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BeneficiaryEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BeneficiaryEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BeneficiaryEntity", id.toString(), this);
    }
  }

  static load(id: string): BeneficiaryEntity | null {
    return changetype<BeneficiaryEntity | null>(
      store.get("BeneficiaryEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get community(): string {
    let value = this.get("community");
    return value!.toString();
  }

  set community(value: string) {
    this.set("community", Value.fromString(value));
  }

  get state(): i32 {
    let value = this.get("state");
    return value!.toI32();
  }

  set state(value: i32) {
    this.set("state", Value.fromI32(value));
  }

  get lastClaimAt(): i32 {
    let value = this.get("lastClaimAt");
    return value!.toI32();
  }

  set lastClaimAt(value: i32) {
    this.set("lastClaimAt", Value.fromI32(value));
  }

  get preLastClaimAt(): i32 {
    let value = this.get("preLastClaimAt");
    return value!.toI32();
  }

  set preLastClaimAt(value: i32) {
    this.set("preLastClaimAt", Value.fromI32(value));
  }

  get activity(): Array<string> {
    let value = this.get("activity");
    return value!.toStringArray();
  }

  set activity(value: Array<string>) {
    this.set("activity", Value.fromStringArray(value));
  }
}

export class UserActivityEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("user", Value.fromBytes(Bytes.empty()));
    this.set("by", Value.fromBytes(Bytes.empty()));
    this.set("community", Value.fromString(""));
    this.set("activity", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserActivityEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UserActivityEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UserActivityEntity", id.toString(), this);
    }
  }

  static load(id: string): UserActivityEntity | null {
    return changetype<UserActivityEntity | null>(
      store.get("UserActivityEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value!.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get by(): Bytes {
    let value = this.get("by");
    return value!.toBytes();
  }

  set by(value: Bytes) {
    this.set("by", Value.fromBytes(value));
  }

  get community(): string {
    let value = this.get("community");
    return value!.toString();
  }

  set community(value: string) {
    this.set("community", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value!.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get activity(): string {
    let value = this.get("activity");
    return value!.toString();
  }

  set activity(value: string) {
    this.set("activity", Value.fromString(value));
  }
}
