// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class AverageValue extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AverageValue entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AverageValue must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AverageValue", id.toString(), this);
    }
  }

  static loadInBlock(id: string): AverageValue | null {
    return changetype<AverageValue | null>(
      store.get_in_block("AverageValue", id)
    );
  }

  static load(id: string): AverageValue | null {
    return changetype<AverageValue | null>(store.get("AverageValue", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get value(): BigDecimal {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get count(): i32 {
    let value = this.get("count");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set count(value: i32) {
    this.set("count", Value.fromI32(value));
  }
}

export class AssetContributions extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AssetContributions entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AssetContributions must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AssetContributions", id.toString(), this);
    }
  }

  static loadInBlock(id: string): AssetContributions | null {
    return changetype<AssetContributions | null>(
      store.get_in_block("AssetContributions", id)
    );
  }

  static load(id: string): AssetContributions | null {
    return changetype<AssetContributions | null>(
      store.get("AssetContributions", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get asset(): Bytes {
    let value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }
}

export class CommunityEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CommunityEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CommunityEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CommunityEntity", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CommunityEntity | null {
    return changetype<CommunityEntity | null>(
      store.get_in_block("CommunityEntity", id)
    );
  }

  static load(id: string): CommunityEntity | null {
    return changetype<CommunityEntity | null>(store.get("CommunityEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get startDayId(): i32 {
    let value = this.get("startDayId");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set startDayId(value: i32) {
    this.set("startDayId", Value.fromI32(value));
  }

  get state(): i32 {
    let value = this.get("state");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set state(value: i32) {
    this.set("state", Value.fromI32(value));
  }

  get previous(): Bytes | null {
    let value = this.get("previous");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set previous(value: Bytes | null) {
    if (!value) {
      this.unset("previous");
    } else {
      this.set("previous", Value.fromBytes(<Bytes>value));
    }
  }

  get next(): Bytes | null {
    let value = this.get("next");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set next(value: Bytes | null) {
    if (!value) {
      this.unset("next");
    } else {
      this.set("next", Value.fromBytes(<Bytes>value));
    }
  }

  get claimAmount(): BigDecimal {
    let value = this.get("claimAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set claimAmount(value: BigDecimal) {
    this.set("claimAmount", Value.fromBigDecimal(value));
  }

  get originalClaimAmount(): BigDecimal {
    let value = this.get("originalClaimAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set originalClaimAmount(value: BigDecimal) {
    this.set("originalClaimAmount", Value.fromBigDecimal(value));
  }

  get maxClaim(): BigDecimal {
    let value = this.get("maxClaim");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set maxClaim(value: BigDecimal) {
    this.set("maxClaim", Value.fromBigDecimal(value));
  }

  get maxTotalClaim(): BigDecimal {
    let value = this.get("maxTotalClaim");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set maxTotalClaim(value: BigDecimal) {
    this.set("maxTotalClaim", Value.fromBigDecimal(value));
  }

  get decreaseStep(): BigDecimal {
    let value = this.get("decreaseStep");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set decreaseStep(value: BigDecimal) {
    this.set("decreaseStep", Value.fromBigDecimal(value));
  }

  get baseInterval(): i32 {
    let value = this.get("baseInterval");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set baseInterval(value: i32) {
    this.set("baseInterval", Value.fromI32(value));
  }

  get incrementInterval(): i32 {
    let value = this.get("incrementInterval");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set incrementInterval(value: i32) {
    this.set("incrementInterval", Value.fromI32(value));
  }

  get beneficiaries(): i32 {
    let value = this.get("beneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set beneficiaries(value: i32) {
    this.set("beneficiaries", Value.fromI32(value));
  }

  get maxBeneficiaries(): i32 {
    let value = this.get("maxBeneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set maxBeneficiaries(value: i32) {
    this.set("maxBeneficiaries", Value.fromI32(value));
  }

  get removedBeneficiaries(): i32 {
    let value = this.get("removedBeneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set removedBeneficiaries(value: i32) {
    this.set("removedBeneficiaries", Value.fromI32(value));
  }

  get lockedBeneficiaries(): i32 {
    let value = this.get("lockedBeneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lockedBeneficiaries(value: i32) {
    this.set("lockedBeneficiaries", Value.fromI32(value));
  }

  get managers(): i32 {
    let value = this.get("managers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set managers(value: i32) {
    this.set("managers", Value.fromI32(value));
  }

  get removedManagers(): i32 {
    let value = this.get("removedManagers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set removedManagers(value: i32) {
    this.set("removedManagers", Value.fromI32(value));
  }

  get claimed(): BigDecimal {
    let value = this.get("claimed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set claimed(value: BigDecimal) {
    this.set("claimed", Value.fromBigDecimal(value));
  }

  get claims(): i32 {
    let value = this.get("claims");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set claims(value: i32) {
    this.set("claims", Value.fromI32(value));
  }

  get contributed(): BigDecimal {
    let value = this.get("contributed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set contributed(value: BigDecimal) {
    this.set("contributed", Value.fromBigDecimal(value));
  }

  get contributors(): i32 {
    let value = this.get("contributors");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set contributors(value: i32) {
    this.set("contributors", Value.fromI32(value));
  }

  get contributions(): Array<string> {
    let value = this.get("contributions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set contributions(value: Array<string>) {
    this.set("contributions", Value.fromStringArray(value));
  }

  get managerList(): Array<string> {
    let value = this.get("managerList");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set managerList(value: Array<string>) {
    this.set("managerList", Value.fromStringArray(value));
  }

  get estimatedFunds(): BigDecimal {
    let value = this.get("estimatedFunds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set estimatedFunds(value: BigDecimal) {
    this.set("estimatedFunds", Value.fromBigDecimal(value));
  }

  get minTranche(): BigDecimal {
    let value = this.get("minTranche");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set minTranche(value: BigDecimal) {
    this.set("minTranche", Value.fromBigDecimal(value));
  }

  get maxTranche(): BigDecimal {
    let value = this.get("maxTranche");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set maxTranche(value: BigDecimal) {
    this.set("maxTranche", Value.fromBigDecimal(value));
  }

  get lastActivity(): i32 {
    let value = this.get("lastActivity");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastActivity(value: i32) {
    this.set("lastActivity", Value.fromI32(value));
  }
}

export class CommunityDailyEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CommunityDailyEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CommunityDailyEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CommunityDailyEntity", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CommunityDailyEntity | null {
    return changetype<CommunityDailyEntity | null>(
      store.get_in_block("CommunityDailyEntity", id)
    );
  }

  static load(id: string): CommunityDailyEntity | null {
    return changetype<CommunityDailyEntity | null>(
      store.get("CommunityDailyEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get community(): string {
    let value = this.get("community");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set community(value: string) {
    this.set("community", Value.fromString(value));
  }

  get dayId(): i32 {
    let value = this.get("dayId");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dayId(value: i32) {
    this.set("dayId", Value.fromI32(value));
  }

  get beneficiaries(): i32 {
    let value = this.get("beneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set beneficiaries(value: i32) {
    this.set("beneficiaries", Value.fromI32(value));
  }

  get managers(): i32 {
    let value = this.get("managers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set managers(value: i32) {
    this.set("managers", Value.fromI32(value));
  }

  get claimed(): BigDecimal {
    let value = this.get("claimed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set claimed(value: BigDecimal) {
    this.set("claimed", Value.fromBigDecimal(value));
  }

  get claims(): i32 {
    let value = this.get("claims");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set claims(value: i32) {
    this.set("claims", Value.fromI32(value));
  }

  get contributed(): BigDecimal {
    let value = this.get("contributed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set contributed(value: BigDecimal) {
    this.set("contributed", Value.fromBigDecimal(value));
  }

  get contributors(): i32 {
    let value = this.get("contributors");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set contributors(value: i32) {
    this.set("contributors", Value.fromI32(value));
  }

  get contributions(): Array<string> {
    let value = this.get("contributions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set contributions(value: Array<string>) {
    this.set("contributions", Value.fromStringArray(value));
  }

  get volume(): BigDecimal {
    let value = this.get("volume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set volume(value: BigDecimal) {
    this.set("volume", Value.fromBigDecimal(value));
  }

  get transactions(): i32 {
    let value = this.get("transactions");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set transactions(value: i32) {
    this.set("transactions", Value.fromI32(value));
  }

  get reach(): i32 {
    let value = this.get("reach");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set reach(value: i32) {
    this.set("reach", Value.fromI32(value));
  }

  get fundingRate(): BigDecimal {
    let value = this.get("fundingRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set fundingRate(value: BigDecimal) {
    this.set("fundingRate", Value.fromBigDecimal(value));
  }
}

export class UBIDailyEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UBIDailyEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UBIDailyEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UBIDailyEntity", id.toString(), this);
    }
  }

  static loadInBlock(id: string): UBIDailyEntity | null {
    return changetype<UBIDailyEntity | null>(
      store.get_in_block("UBIDailyEntity", id)
    );
  }

  static load(id: string): UBIDailyEntity | null {
    return changetype<UBIDailyEntity | null>(store.get("UBIDailyEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get communities(): i32 {
    let value = this.get("communities");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set communities(value: i32) {
    this.set("communities", Value.fromI32(value));
  }

  get beneficiaries(): i32 {
    let value = this.get("beneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set beneficiaries(value: i32) {
    this.set("beneficiaries", Value.fromI32(value));
  }

  get managers(): i32 {
    let value = this.get("managers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set managers(value: i32) {
    this.set("managers", Value.fromI32(value));
  }

  get claimed(): BigDecimal {
    let value = this.get("claimed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set claimed(value: BigDecimal) {
    this.set("claimed", Value.fromBigDecimal(value));
  }

  get claims(): i32 {
    let value = this.get("claims");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set claims(value: i32) {
    this.set("claims", Value.fromI32(value));
  }

  get contributed(): BigDecimal {
    let value = this.get("contributed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set contributed(value: BigDecimal) {
    this.set("contributed", Value.fromBigDecimal(value));
  }

  get contributors(): i32 {
    let value = this.get("contributors");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set contributors(value: i32) {
    this.set("contributors", Value.fromI32(value));
  }

  get contributions(): Array<string> {
    let value = this.get("contributions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set contributions(value: Array<string>) {
    this.set("contributions", Value.fromStringArray(value));
  }

  get volume(): BigDecimal {
    let value = this.get("volume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set volume(value: BigDecimal) {
    this.set("volume", Value.fromBigDecimal(value));
  }

  get transactions(): i32 {
    let value = this.get("transactions");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set transactions(value: i32) {
    this.set("transactions", Value.fromI32(value));
  }

  get reach(): i32 {
    let value = this.get("reach");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set reach(value: i32) {
    this.set("reach", Value.fromI32(value));
  }

  get fundingRate(): BigDecimal {
    let value = this.get("fundingRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set fundingRate(value: BigDecimal) {
    this.set("fundingRate", Value.fromBigDecimal(value));
  }

  get dailyUbiRate(): string {
    let value = this.get("dailyUbiRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set dailyUbiRate(value: string) {
    this.set("dailyUbiRate", Value.fromString(value));
  }

  get dailyGivingRate(): string {
    let value = this.get("dailyGivingRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set dailyGivingRate(value: string) {
    this.set("dailyGivingRate", Value.fromString(value));
  }

  get globalCommunityUBIAvg(): string {
    let value = this.get("globalCommunityUBIAvg");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set globalCommunityUBIAvg(value: string) {
    this.set("globalCommunityUBIAvg", Value.fromString(value));
  }
}

export class ManagerEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ManagerEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ManagerEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ManagerEntity", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ManagerEntity | null {
    return changetype<ManagerEntity | null>(
      store.get_in_block("ManagerEntity", id)
    );
  }

  static load(id: string): ManagerEntity | null {
    return changetype<ManagerEntity | null>(store.get("ManagerEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get community(): string {
    let value = this.get("community");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set community(value: string) {
    this.set("community", Value.fromString(value));
  }

  get state(): i32 {
    let value = this.get("state");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set state(value: i32) {
    this.set("state", Value.fromI32(value));
  }

  get added(): i32 {
    let value = this.get("added");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set added(value: i32) {
    this.set("added", Value.fromI32(value));
  }

  get removed(): i32 {
    let value = this.get("removed");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set removed(value: i32) {
    this.set("removed", Value.fromI32(value));
  }

  get since(): i32 {
    let value = this.get("since");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set since(value: i32) {
    this.set("since", Value.fromI32(value));
  }

  get until(): i32 {
    let value = this.get("until");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set until(value: i32) {
    this.set("until", Value.fromI32(value));
  }

  get addedBy(): Bytes {
    let value = this.get("addedBy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set addedBy(value: Bytes) {
    this.set("addedBy", Value.fromBytes(value));
  }

  get removedBy(): Bytes | null {
    let value = this.get("removedBy");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set removedBy(value: Bytes | null) {
    if (!value) {
      this.unset("removedBy");
    } else {
      this.set("removedBy", Value.fromBytes(<Bytes>value));
    }
  }

  get lastActivity(): i32 {
    let value = this.get("lastActivity");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastActivity(value: i32) {
    this.set("lastActivity", Value.fromI32(value));
  }
}

export class BeneficiaryEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BeneficiaryEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BeneficiaryEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BeneficiaryEntity", id.toString(), this);
    }
  }

  static loadInBlock(id: string): BeneficiaryEntity | null {
    return changetype<BeneficiaryEntity | null>(
      store.get_in_block("BeneficiaryEntity", id)
    );
  }

  static load(id: string): BeneficiaryEntity | null {
    return changetype<BeneficiaryEntity | null>(
      store.get("BeneficiaryEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get community(): string {
    let value = this.get("community");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set community(value: string) {
    this.set("community", Value.fromString(value));
  }

  get state(): i32 {
    let value = this.get("state");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set state(value: i32) {
    this.set("state", Value.fromI32(value));
  }

  get lastClaimAt(): i32 {
    let value = this.get("lastClaimAt");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastClaimAt(value: i32) {
    this.set("lastClaimAt", Value.fromI32(value));
  }

  get preLastClaimAt(): i32 {
    let value = this.get("preLastClaimAt");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set preLastClaimAt(value: i32) {
    this.set("preLastClaimAt", Value.fromI32(value));
  }

  get claims(): i32 {
    let value = this.get("claims");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set claims(value: i32) {
    this.set("claims", Value.fromI32(value));
  }

  get claimed(): BigDecimal {
    let value = this.get("claimed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set claimed(value: BigDecimal) {
    this.set("claimed", Value.fromBigDecimal(value));
  }

  get since(): i32 {
    let value = this.get("since");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set since(value: i32) {
    this.set("since", Value.fromI32(value));
  }

  get addedBy(): Bytes {
    let value = this.get("addedBy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set addedBy(value: Bytes) {
    this.set("addedBy", Value.fromBytes(value));
  }

  get removedBy(): Bytes | null {
    let value = this.get("removedBy");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set removedBy(value: Bytes | null) {
    if (!value) {
      this.unset("removedBy");
    } else {
      this.set("removedBy", Value.fromBytes(<Bytes>value));
    }
  }

  get lastActivity(): i32 {
    let value = this.get("lastActivity");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastActivity(value: i32) {
    this.set("lastActivity", Value.fromI32(value));
  }
}

export class UserActivityEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserActivityEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserActivityEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserActivityEntity", id.toString(), this);
    }
  }

  static loadInBlock(id: string): UserActivityEntity | null {
    return changetype<UserActivityEntity | null>(
      store.get_in_block("UserActivityEntity", id)
    );
  }

  static load(id: string): UserActivityEntity | null {
    return changetype<UserActivityEntity | null>(
      store.get("UserActivityEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get by(): Bytes {
    let value = this.get("by");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set by(value: Bytes) {
    this.set("by", Value.fromBytes(value));
  }

  get community(): string {
    let value = this.get("community");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set community(value: string) {
    this.set("community", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get activity(): string {
    let value = this.get("activity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set activity(value: string) {
    this.set("activity", Value.fromString(value));
  }
}

export class UserTransactionsEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save UserTransactionsEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserTransactionsEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserTransactionsEntity", id.toString(), this);
    }
  }

  static loadInBlock(id: string): UserTransactionsEntity | null {
    return changetype<UserTransactionsEntity | null>(
      store.get_in_block("UserTransactionsEntity", id)
    );
  }

  static load(id: string): UserTransactionsEntity | null {
    return changetype<UserTransactionsEntity | null>(
      store.get("UserTransactionsEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get volume(): BigDecimal {
    let value = this.get("volume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set volume(value: BigDecimal) {
    this.set("volume", Value.fromBigDecimal(value));
  }

  get sentTxs(): i32 {
    let value = this.get("sentTxs");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set sentTxs(value: i32) {
    this.set("sentTxs", Value.fromI32(value));
  }

  get receivedTxs(): i32 {
    let value = this.get("receivedTxs");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set receivedTxs(value: i32) {
    this.set("receivedTxs", Value.fromI32(value));
  }
}

export class UserTransactionWithEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save UserTransactionWithEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserTransactionWithEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserTransactionWithEntity", id.toString(), this);
    }
  }

  static loadInBlock(id: string): UserTransactionWithEntity | null {
    return changetype<UserTransactionWithEntity | null>(
      store.get_in_block("UserTransactionWithEntity", id)
    );
  }

  static load(id: string): UserTransactionWithEntity | null {
    return changetype<UserTransactionWithEntity | null>(
      store.get("UserTransactionWithEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lastTransaction(): i32 {
    let value = this.get("lastTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastTransaction(value: i32) {
    this.set("lastTransaction", Value.fromI32(value));
  }
}

export class ContributorContributionsEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ContributorContributionsEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ContributorContributionsEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ContributorContributionsEntity", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ContributorContributionsEntity | null {
    return changetype<ContributorContributionsEntity | null>(
      store.get_in_block("ContributorContributionsEntity", id)
    );
  }

  static load(id: string): ContributorContributionsEntity | null {
    return changetype<ContributorContributionsEntity | null>(
      store.get("ContributorContributionsEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lastContribution(): i32 {
    let value = this.get("lastContribution");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastContribution(value: i32) {
    this.set("lastContribution", Value.fromI32(value));
  }
}

export class ContributorEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ContributorEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ContributorEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ContributorEntity", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ContributorEntity | null {
    return changetype<ContributorEntity | null>(
      store.get_in_block("ContributorEntity", id)
    );
  }

  static load(id: string): ContributorEntity | null {
    return changetype<ContributorEntity | null>(
      store.get("ContributorEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contributions(): Array<string> {
    let value = this.get("contributions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set contributions(value: Array<string>) {
    this.set("contributions", Value.fromStringArray(value));
  }

  get lastContribution(): i32 {
    let value = this.get("lastContribution");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastContribution(value: i32) {
    this.set("lastContribution", Value.fromI32(value));
  }

  get pact(): BigDecimal {
    let value = this.get("pact");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set pact(value: BigDecimal) {
    this.set("pact", Value.fromBigDecimal(value));
  }

  get staking(): BigDecimal {
    let value = this.get("staking");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set staking(value: BigDecimal) {
    this.set("staking", Value.fromBigDecimal(value));
  }

  get lastPACTActivity(): i32 {
    let value = this.get("lastPACTActivity");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastPACTActivity(value: i32) {
    this.set("lastPACTActivity", Value.fromI32(value));
  }
}

export class ProposalCouncil extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProposalCouncil entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ProposalCouncil must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ProposalCouncil", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ProposalCouncil | null {
    return changetype<ProposalCouncil | null>(
      store.get_in_block("ProposalCouncil", id)
    );
  }

  static load(id: string): ProposalCouncil | null {
    return changetype<ProposalCouncil | null>(store.get("ProposalCouncil", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get proposer(): Bytes {
    let value = this.get("proposer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set proposer(value: Bytes) {
    this.set("proposer", Value.fromBytes(value));
  }

  get signatures(): Array<string> {
    let value = this.get("signatures");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set signatures(value: Array<string>) {
    this.set("signatures", Value.fromStringArray(value));
  }

  get calldatas(): Array<Bytes> {
    let value = this.get("calldatas");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set calldatas(value: Array<Bytes>) {
    this.set("calldatas", Value.fromBytesArray(value));
  }

  get endBlock(): i32 {
    let value = this.get("endBlock");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endBlock(value: i32) {
    this.set("endBlock", Value.fromI32(value));
  }

  get description(): string {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get status(): i32 {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }

  get votedAgainst(): Array<Bytes> {
    let value = this.get("votedAgainst");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set votedAgainst(value: Array<Bytes>) {
    this.set("votedAgainst", Value.fromBytesArray(value));
  }

  get votedFor(): Array<Bytes> {
    let value = this.get("votedFor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set votedFor(value: Array<Bytes>) {
    this.set("votedFor", Value.fromBytesArray(value));
  }

  get votedAbstain(): Array<Bytes> {
    let value = this.get("votedAbstain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set votedAbstain(value: Array<Bytes>) {
    this.set("votedAbstain", Value.fromBytesArray(value));
  }
}

export class CouncilMember extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CouncilMember entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CouncilMember must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CouncilMember", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CouncilMember | null {
    return changetype<CouncilMember | null>(
      store.get_in_block("CouncilMember", id)
    );
  }

  static load(id: string): CouncilMember | null {
    return changetype<CouncilMember | null>(store.get("CouncilMember", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get since(): i32 {
    let value = this.get("since");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set since(value: i32) {
    this.set("since", Value.fromI32(value));
  }

  get until(): i32 {
    let value = this.get("until");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set until(value: i32) {
    this.set("until", Value.fromI32(value));
  }

  get status(): i32 {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }

  get votes(): i32 {
    let value = this.get("votes");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set votes(value: i32) {
    this.set("votes", Value.fromI32(value));
  }
}

export class AmbassadorsEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AmbassadorsEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AmbassadorsEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AmbassadorsEntity", id.toString(), this);
    }
  }

  static loadInBlock(id: string): AmbassadorsEntity | null {
    return changetype<AmbassadorsEntity | null>(
      store.get_in_block("AmbassadorsEntity", id)
    );
  }

  static load(id: string): AmbassadorsEntity | null {
    return changetype<AmbassadorsEntity | null>(
      store.get("AmbassadorsEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get status(): i32 {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }

  get ambassadors(): AmbassadorLoader {
    return new AmbassadorLoader(
      "AmbassadorsEntity",
      this.get("id")!.toString(),
      "ambassadors"
    );
  }
}

export class Ambassador extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Ambassador entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Ambassador must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Ambassador", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Ambassador | null {
    return changetype<Ambassador | null>(store.get_in_block("Ambassador", id));
  }

  static load(id: string): Ambassador | null {
    return changetype<Ambassador | null>(store.get("Ambassador", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get entity(): string {
    let value = this.get("entity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set entity(value: string) {
    this.set("entity", Value.fromString(value));
  }

  get since(): i32 {
    let value = this.get("since");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set since(value: i32) {
    this.set("since", Value.fromI32(value));
  }

  get until(): i32 {
    let value = this.get("until");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set until(value: i32) {
    this.set("until", Value.fromI32(value));
  }

  get status(): i32 {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }

  get communities(): Array<Bytes> {
    let value = this.get("communities");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set communities(value: Array<Bytes>) {
    this.set("communities", Value.fromBytesArray(value));
  }
}

export class DepositAsset extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DepositAsset entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DepositAsset must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DepositAsset", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DepositAsset | null {
    return changetype<DepositAsset | null>(
      store.get_in_block("DepositAsset", id)
    );
  }

  static load(id: string): DepositAsset | null {
    return changetype<DepositAsset | null>(store.get("DepositAsset", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get asset(): Bytes {
    let value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get deposited(): BigDecimal {
    let value = this.get("deposited");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set deposited(value: BigDecimal) {
    this.set("deposited", Value.fromBigDecimal(value));
  }

  get interest(): BigDecimal {
    let value = this.get("interest");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set interest(value: BigDecimal) {
    this.set("interest", Value.fromBigDecimal(value));
  }
}

export class Depositor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Depositor entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Depositor must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Depositor", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Depositor | null {
    return changetype<Depositor | null>(store.get_in_block("Depositor", id));
  }

  static load(id: string): Depositor | null {
    return changetype<Depositor | null>(store.get("Depositor", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get assets(): Array<string> {
    let value = this.get("assets");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set assets(value: Array<string>) {
    this.set("assets", Value.fromStringArray(value));
  }

  get firstDeposit(): i32 {
    let value = this.get("firstDeposit");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set firstDeposit(value: i32) {
    this.set("firstDeposit", Value.fromI32(value));
  }

  get lastDeposit(): i32 {
    let value = this.get("lastDeposit");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastDeposit(value: i32) {
    this.set("lastDeposit", Value.fromI32(value));
  }

  get redirects(): i32 {
    let value = this.get("redirects");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set redirects(value: i32) {
    this.set("redirects", Value.fromI32(value));
  }

  get withdraw(): i32 {
    let value = this.get("withdraw");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set withdraw(value: i32) {
    this.set("withdraw", Value.fromI32(value));
  }
}

export class DepositRedirectDaily extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DepositRedirectDaily entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DepositRedirectDaily must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DepositRedirectDaily", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DepositRedirectDaily | null {
    return changetype<DepositRedirectDaily | null>(
      store.get_in_block("DepositRedirectDaily", id)
    );
  }

  static load(id: string): DepositRedirectDaily | null {
    return changetype<DepositRedirectDaily | null>(
      store.get("DepositRedirectDaily", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get assets(): Array<string> {
    let value = this.get("assets");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set assets(value: Array<string>) {
    this.set("assets", Value.fromStringArray(value));
  }

  get depositors(): i32 {
    let value = this.get("depositors");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set depositors(value: i32) {
    this.set("depositors", Value.fromI32(value));
  }
}

export class ReferralCampaign extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ReferralCampaign entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReferralCampaign must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReferralCampaign", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ReferralCampaign | null {
    return changetype<ReferralCampaign | null>(
      store.get_in_block("ReferralCampaign", id)
    );
  }

  static load(id: string): ReferralCampaign | null {
    return changetype<ReferralCampaign | null>(
      store.get("ReferralCampaign", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get startTime(): i32 {
    let value = this.get("startTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set startTime(value: i32) {
    this.set("startTime", Value.fromI32(value));
  }

  get endTime(): i32 {
    let value = this.get("endTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endTime(value: i32) {
    this.set("endTime", Value.fromI32(value));
  }

  get rewardAmount(): BigDecimal {
    let value = this.get("rewardAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set rewardAmount(value: BigDecimal) {
    this.set("rewardAmount", Value.fromBigDecimal(value));
  }

  get maxReferralLinks(): i32 {
    let value = this.get("maxReferralLinks");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set maxReferralLinks(value: i32) {
    this.set("maxReferralLinks", Value.fromI32(value));
  }
}

export class UserReferral extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserReferral entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserReferral must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserReferral", id.toString(), this);
    }
  }

  static loadInBlock(id: string): UserReferral | null {
    return changetype<UserReferral | null>(
      store.get_in_block("UserReferral", id)
    );
  }

  static load(id: string): UserReferral | null {
    return changetype<UserReferral | null>(store.get("UserReferral", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get campaign(): string {
    let value = this.get("campaign");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set campaign(value: string) {
    this.set("campaign", Value.fromString(value));
  }

  get usedBy(): Array<Bytes> {
    let value = this.get("usedBy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set usedBy(value: Array<Bytes>) {
    this.set("usedBy", Value.fromBytesArray(value));
  }

  get usages(): i32 {
    let value = this.get("usages");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set usages(value: i32) {
    this.set("usages", Value.fromI32(value));
  }
}

export class AmbassadorLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Ambassador[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Ambassador[]>(value);
  }
}
